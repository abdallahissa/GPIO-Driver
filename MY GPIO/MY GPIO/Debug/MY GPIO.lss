
MY GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b40  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000379  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c4  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PIN_DIRC>:
	return ACCESS_REG_8BIT((port+INPUT_OFFSET));
}

void PIN_DIRC(PORT_t port,PIN_t pin,PINDirc_t dirc) 
{	
	if(dirc == OUTPUT_PIN)
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	69 f4       	brne	.+26     	; 0x8a <PIN_DIRC+0x1e>
	{
		SET_BIT((port+DIRC_OFFSET),pin);
  70:	e8 2f       	mov	r30, r24
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	21 81       	ldd	r18, Z+1	; 0x01
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <PIN_DIRC+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	6a 95       	dec	r22
  82:	e2 f7       	brpl	.-8      	; 0x7c <PIN_DIRC+0x10>
  84:	82 2b       	or	r24, r18
  86:	81 83       	std	Z+1, r24	; 0x01
  88:	08 95       	ret
	}
	else
	{
		CLEAR_BIT((port+DIRC_OFFSET),pin);
  8a:	e8 2f       	mov	r30, r24
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	21 81       	ldd	r18, Z+1	; 0x01
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <PIN_DIRC+0x2e>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	6a 95       	dec	r22
  9c:	e2 f7       	brpl	.-8      	; 0x96 <PIN_DIRC+0x2a>
  9e:	80 95       	com	r24
  a0:	82 23       	and	r24, r18
  a2:	81 83       	std	Z+1, r24	; 0x01
  a4:	08 95       	ret

000000a6 <PIN_WRITE>:
	}
}

void PIN_WRITE(PORT_t port,PIN_t pin,LOGIC_STATUS_t val)
{
	if(val == HIGH)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	69 f4       	brne	.+26     	; 0xc4 <PIN_WRITE+0x1e>
	{
		SET_BIT((port+OUTPUT_OFFSET),pin);
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	22 81       	ldd	r18, Z+2	; 0x02
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <PIN_WRITE+0x14>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <PIN_WRITE+0x10>
  be:	82 2b       	or	r24, r18
  c0:	82 83       	std	Z+2, r24	; 0x02
  c2:	08 95       	ret
	} 
	else
	{
		CLEAR_BIT((port+OUTPUT_OFFSET),pin);
  c4:	e8 2f       	mov	r30, r24
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	22 81       	ldd	r18, Z+2	; 0x02
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <PIN_WRITE+0x2e>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <PIN_WRITE+0x2a>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	82 83       	std	Z+2, r24	; 0x02
  de:	08 95       	ret

000000e0 <PIN_READ>:
	}
}

uint8 PIN_READ(PORT_t port,PIN_t pin)
{
	return BIT_IS_SET((port+INPUT_OFFSET),pin);
  e0:	e8 2f       	mov	r30, r24
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	20 81       	ld	r18, Z
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <PIN_READ+0x10>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <PIN_READ+0xc>
}
  f4:	82 23       	and	r24, r18
  f6:	08 95       	ret

000000f8 <main>:
#include <util/delay.h>


int main(void)
{
    PIN_DIRC(A,p1,OUTPUT_PIN);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	89 e3       	ldi	r24, 0x39	; 57
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <PIN_DIRC>
	PIN_DIRC(B,p3,OUTPUT_PIN);// = PORTA = 0x01;
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	86 e3       	ldi	r24, 0x36	; 54
 108:	0e 94 36 00 	call	0x6c	; 0x6c <PIN_DIRC>
	PIN_DIRC(C,p2,INPUT_PIN); // = DDRA=0b0000010=0x02;
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	83 e3       	ldi	r24, 0x33	; 51
 112:	0e 94 36 00 	call	0x6c	; 0x6c <PIN_DIRC>
	PIN_WRITE(C,p2,HIGH); //pull_up resistor
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	83 e3       	ldi	r24, 0x33	; 51
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <PIN_WRITE>
    while(1) 
    {
		if(PIN_READ(C,p2) == 0 )
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	0e 94 70 00 	call	0xe0	; 0xe0 <PIN_READ>
 128:	81 11       	cpse	r24, r1
 12a:	2d c0       	rjmp	.+90     	; 0x186 <main+0x8e>
		{
			PIN_WRITE(A,p1,HIGH);
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	89 e3       	ldi	r24, 0x39	; 57
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <PIN_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	87 ea       	ldi	r24, 0xA7	; 167
 138:	91 e6       	ldi	r25, 0x61	; 97
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x42>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x48>
 140:	00 00       	nop
			_delay_ms(100);
			PIN_WRITE(A,p1,LOW);
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	89 e3       	ldi	r24, 0x39	; 57
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <PIN_WRITE>
 14c:	87 ea       	ldi	r24, 0xA7	; 167
 14e:	91 e6       	ldi	r25, 0x61	; 97
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x58>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x5e>
 156:	00 00       	nop
			_delay_ms(100);
			PIN_WRITE(B,p3,HIGH);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	86 e3       	ldi	r24, 0x36	; 54
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <PIN_WRITE>
 162:	87 ea       	ldi	r24, 0xA7	; 167
 164:	91 e6       	ldi	r25, 0x61	; 97
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x6e>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x74>
 16c:	00 00       	nop
			_delay_ms(100);
			PIN_WRITE(B,p3,LOW);
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	86 e3       	ldi	r24, 0x36	; 54
 174:	0e 94 53 00 	call	0xa6	; 0xa6 <PIN_WRITE>
 178:	87 ea       	ldi	r24, 0xA7	; 167
 17a:	91 e6       	ldi	r25, 0x61	; 97
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x84>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x8a>
 182:	00 00       	nop
 184:	cd cf       	rjmp	.-102    	; 0x120 <main+0x28>
			_delay_ms(100);
		} 
		else
		{
			PIN_WRITE(A,p1,LOW);
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	89 e3       	ldi	r24, 0x39	; 57
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <PIN_WRITE>
			PIN_WRITE(B,p3,LOW);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	86 e3       	ldi	r24, 0x36	; 54
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <PIN_WRITE>
 19a:	c2 cf       	rjmp	.-124    	; 0x120 <main+0x28>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
